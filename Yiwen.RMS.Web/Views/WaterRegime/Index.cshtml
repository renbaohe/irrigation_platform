<link rel="stylesheet" type="text/css" href="~/Content/handsontable.full.css" />
<link rel="stylesheet" type="text/css" href="~/Content/themes/default/easyui.css" />
<script src="~/Scripts/handsontable.full.js"></script>
<script src="~/Scripts/xlsx.full.min.js"></script>
<script src="~/Scripts/jquery-1.11.3.min.js" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.easyui.min.js")"></script>
<script>
    //----工具类 开始----
    var utl = {};
    utl.Binary = {
        fixdata(data) { //文件流转BinaryString
            var o = "",
                l = 0,
                w = 10240;
            for (; l < data.byteLength / w; ++l) o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)));
            o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)));
            return o;
        },
        s2ab(s) { //字符串转字符流
            var buf = new ArrayBuffer(s.length);
            var view = new Uint8Array(buf);
            for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
        }
    }
    utl.XLSX = {
        wb: null,
        rABS: false,
        import(f, c) {//导入根据文件
            this.wb = null;
            var reader = new FileReader();
            reader.onload = function (e) {
                var data = e.target.result;
                if (utl.XLSX.rABS) {
                    utl.XLSX.wb = XLSX.read(btoa(utl.Binary.fixdata(data)), {//手动转化
                        type: 'base64'
                    });
                } else {
                    utl.XLSX.wb = XLSX.read(data, {
                        type: 'binary'
                    });
                }
                if (c && typeof (c)) {
                    c();
                }
            };
            if (utl.XLSX.rABS) {
                reader.readAsArrayBuffer(f);
            } else {
                reader.readAsBinaryString(f);
            }
        },
        onImport(obj, c) {//导入根据 input file标签
            if (!obj.files) {
                return;
            }
            this.import(obj.files[0], c);
        },
        getSheetsByIndex(index = 0) {//获取数据根据Sheets索引
            return XLSX.utils.sheet_to_json(this.wb.Sheets[this.wb.SheetNames[index]]);
        },
        getCharCol(n) {
            let temCol = '',
                s = '',
                m = 0
            while (n > 0) {
                m = n % 26 + 1
                s = String.fromCharCode(m + 64) + s
                n = (n - m) / 26
            }
            return s
        },
        export(json, title, type) {//导出
            var keyMap = [];//获取keys
            for (k in json[0]) {
                keyMap.push(k);
            }
            var tmpdata = [];//用来保存转换好的json
            json.map((v, i) => keyMap.map((k, j) => Object.assign({}, {
                v: v[k],
                position: (j > 25 ? utl.XLSX.getCharCol(j) : String.fromCharCode(65 + j)) + (i + 1)
            }))).reduce((prev, next) => prev.concat(next)).forEach((v, i) => tmpdata[v.position] = {
                v: v.v
            });
            var outputPos = Object.keys(tmpdata); //设置区域,比如表格从A1到D10
            var tmpWB = new Object();
            title = title ? title : "mySheet";
            tmpWB.SheetNames = [title];
            tmpWB.Sheets = {};
            tmpWB.Sheets[title] = Object.assign({}, tmpdata, //内容
                {
                    '!ref': outputPos[0] + ':' + outputPos[outputPos.length - 1] //设置填充区域
                });
            return new Blob([utl.Binary.s2ab(XLSX.write(tmpWB,
                { bookType: (type == undefined ? 'xlsx' : type), bookSST: false, type: 'binary' }//这里的数据是用来定义导出的格式类型
            ))], { type: "" }); //创建二进制对象写入转换好的字节流
        },
        onExport(json, title, type) {//直接下载
            utl.Download.byObj(this.export(json, title, type), "下载.xlsx");
        }
    };
    utl.Download = {
        byURL(url, fileName) {//动态下载
            var tmpa = document.createElement("a");
            tmpa.download = fileName || "下载";
            tmpa.href = url; //绑定a标签
            tmpa.click(); //模拟点击实现下载
        },
        byObj(obj, fileName) {//内存二进制数据下载
            this.byURL(URL.createObjectURL(obj), fileName);
            setTimeout(function () { //延时释放
                URL.revokeObjectURL(obj); //用URL.revokeObjectURL()来释放这个object URL
            }, 100);
        }
    }
    utl.Object = {
        reverse(obj) {//对象键值倒转
            var o = new Object();
            for (var k in obj) {
                o[obj[k]] = k;
            }
            return o;
        },
        deepCopy() {//深拷贝
            let temp = obj.constructor === Array ? [] : {}
            for (let val in obj) {
                temp[val] = typeof obj[val] == 'object' ? deepCopy(obj[val]) : obj[val];
            }
            return temp;
        },
        copyJson(o) { return JSON.parse(JSON.stringify(o)); }//拷贝JSON格式
    }
        //----工具类 结束----
</script>
<style>
    * {
        margin: 0;
        padding: 0;
    }

    body {
        font-family: Helvetica Neue, Helvetica, PingFang SC, Hiragino Sans GB, Microsoft YaHei, SimSun, sans-serif;
        overflow: auto;
        font-weight: 400;
        -webkit-font-smoothing: antialiased;
    }
</style>
<script>
    //---导入头信息 开始--
    const xHred = {
        "ID": "id",
        "账号": "uname",
        "用户名": "rname",
        "密码": "pwd",
        "性别": "sex",
        "出生日期": "birth",
        "电话": "mobPhone"
    };

    const filterVal = {//<=====值转化
        "pwd": function (value) {
            return "假装 被加密了"
        },
        "sex": function (key) {
            key = { "男": 0, "女": 1, "": 0, undefined: 0 }[key];
            return key ? key : 0;
        }
    };
        //---导入头信息 结束--
</script>

<body style="padding:10px;">
    <script>
        //------导入导出 -----
        function impt(emt) {//<===导入
            utl.XLSX.onImport(emt, function () {
                var rt = utl.XLSX.getSheetsByIndex();//<===默认获取Sheet1
                var tmp = [];
                rt.forEach(function (value, index, array) {
                    var t = new Object();
                    for (var k in value) {
                        t[xHred[k]] = value[k];
                    }
                    tmp.push(t);
                });
                hot.loadData(tmp);//<====将读取完成数据显示到handsontable
            });
        }
        function down() {//<===下载导出数据
            var d = utl.Object.copyJson(hot.getSourceData());//<=====读取handsontable的数据
            d.unshift(utl.Object.reverse(xHred));//<====追加到列头
            utl.XLSX.onExport(d);//<====导出
        }
        var hot;
        function saveData() {//<====获取真实数据
            var tmp = [];
            hot.getSourceData().forEach(function (value, index, array) {
                if (index > 1) {
                    var t = new Object();
                    for (var k in value) {
                        t[k] = filterVal[k] ? filterVal[k](value[k]) : value[k];//<====将xlsx数据转为实际需要的值
                    }
                    tmp.push(t);
                }
            });
            /*
            *更多规则自己定义吧
            */
            //alert(JSON.stringify(tmp));
            $.ajax({
                url: '@Url.Action("Save","WaterRegime")',
                data: { "data":JSON.stringify(tmp) },
                 type: 'POST',
                 success: function (result) {
                     //console.log(result);
                     if (result.Success) {
                        $.messager.alert({
                            title: '操作提示',
                            msg: '保存成功！',
                            icon: 'info',
                        });
                     } 
                 }
             });
        }
        //------导入导出 -----
    </script>

    @*<input type="file" onchange="impt(this)" />
        <input type="button" value="下载" onclick="down()" />*@
    @if (!Request.IsAuthenticated)
    {
        <div style="text-align:center; font-size:30px; margin-bottom:15px;">
            宝鸡峡八时水情表
        </div>
    }

    <div style="overflow:hidden;">
        <div style="float:left;width:40%;">
        @if (Request.IsAuthenticated)
        {
            <input type="button" id="btnSave" value=" 保存数据 " onclick="saveData()" style="padding:3px;" />
        }
        &nbsp;</div>
        <div style="float:left;width:60%;">
            <input type="button" value=" 前一天 " id="btnPre" onclick="setDateBox(-1)" style="padding:3px;" />
            <input class="easyui-datebox" name="showDate" id="showDate" data-options="formatter:myformatter,parser:myparser" style="width:120px;height:28px;" />
            <input type="button" value=" 今天 " id="btnToday" onclick="setDateBox(0)" style="padding:3px;display:none;" />
            <input type="button" value=" 后一天 " id="btnNext" onclick="setDateBox(1)" style="padding:3px; display:none;" />
        </div>
    </div>
    <div id="hot" style="margin-top:10px;"></div>
    <script>
        function myformatter(date) {
            var y = date.getFullYear();
            var m = date.getMonth() + 1;
            var d = date.getDate();
            return y + '-' + (m < 10 ? ('0' + m) : m) + '-'
                + (d < 10 ? ('0' + d) : d);
        }
        function myparser(s) {
            if (!s)
                return new Date();
            var ss = (s.split('-'));
            var y = parseInt(ss[0], 10);
            var m = parseInt(ss[1], 10);
            var d = parseInt(ss[2], 10);
            if (!isNaN(y) && !isNaN(m) && !isNaN(d)) {
                return new Date(y, m - 1, d);
            } else {
                return new Date();
            }
        }
        $(function () {
            $('#showDate').datebox('calendar').calendar({
                validator: function (date) {
                    var now = new Date();
                    var d1 = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                    return d1 >= date;
                }
            });
            setDateBox(0);
        });

        function setDateBox(flag) {
            $("#showDate").datebox("setValue", getDate(flag));
        }

        function getDate(flag) {
            var curr_time;
            if (flag == 0) {
                curr_time = new Date();
            } else {
                curr_time = new Date(($("#showDate").datebox("getValue")));
            }
            curr_time.setDate(curr_time.getDate() + flag);
            var strDate = curr_time.getFullYear() + "-";
            strDate += formatMonthDate(curr_time.getMonth() + 1) + "-";
            strDate += formatMonthDate(curr_time.getDate());
            return strDate;
        }

        function formatMonthDate(value) {
            if (value < 10) {
                return "0" + value;
            } else {
                return value;
            }
        }

        $('#showDate').datebox({
            onChange: function () {
                var date = $(this).datebox("getValue");
                var btnToday = $("#btnToday");
                var btnNext = $("#btnNext");
                var btnSave = $("#btnSave");
                if (date == getDate(0)) {
                    btnNext.hide();
                    btnToday.hide();
                    btnSave.show();
                } else {
                    btnToday.show();
                    btnNext.show();
                    btnSave.hide();
                }
                $.ajax({
                    url: '@Url.Action("Search","WaterRegime")?date=' + date,
                    type: 'GET',
                    success: function (result) {
                        if (result.Success) {
                            $("#hot").empty();
                            showDatas(result.MessageCode, result.Message);
                        }
                    }
                });
            }
        })

        function showDatas(code, all_datas) {
            //----handsontable 初始化 开始------
            var hotElement = document.querySelector('#hot');//<====绑定handsontable初始化div
            //var colHeaders = [];//<===handsontable列头显示值
            //var cols = [];//<====handsontable列头显示值对应的实际字段与其他配置
            //for (var key in xHred) {
            //    cols.push({ data: xHred[key] });
            //    colHeaders.push(key);
            //}

            var data = [
                ["干渠输水情况", "", "", "灌区用水情况", "", "", "", "", "", "", "", "", ""]
                , ["灌区", "交接断面", "过水流量", "站名", "引水流量", "站名", "引水流量", "站名", "引水流量", "站名", "引水流量", "站名", "引水流量"]
            ];

            if (code == 0) {
                var items = all_datas.split('|');

                var arr1 = items[0].split(',');
                var arr2 = items[1].split(',');
                var arr3 = items[2].split(',');
                var arr4 = items[3].split(',');

                var arr41 = [], arr42 = [], arr43 = [], arr44 = [], arr45 = [];
                arr4.forEach(function (value) {
                    if (arr41.length < arr1.length) {     //arr1.length 即为灌区塬上部分数据行数
                        arr41.push(value);
                    }
                    else if (arr42.length < arr1.length) {
                        arr42.push(value);
                    }
                    else if (arr43.length < arr1.length) {
                        arr43.push(value);
                    }
                    else if (arr44.length < arr1.length) {
                        arr44.push(value);
                    }
                    else if (arr45.length < arr1.length) {
                        arr45.push(value);
                    }
                })

                var i = 0;
                arr1.forEach(function (value) {
                    var tmp5 = arr45[i] ? arr45[i] : "";
                    var temp = ["塬上", value, "", arr41[i], "", arr42[i], "", arr43[i], "", arr44[i], "", tmp5, ""];
                    data.push(temp);
                    i++;
                })
                i = 0;
                arr2.forEach(function (value) {
                    if (i == 0) {
                        var temp = ["塬下", value, "", "干 渠 退 水", "", "水     库    水    情", "", "", "", "", "", "备       注", ""];
                        data.push(temp);
                    }
                    else if (i == 1) {
                        var temp = ["塬下", value, "", "闸    名", "流  量", "库   名", "水  位", "蓄水量", "兴利调度", "防汛泄洪", "正常水位", "", ""];
                        data.push(temp);
                    }
                    else {
                        var temp = ["塬下", value, "", "", "", arr3[i - 2], "", "", "", "", "", "", ""];
                        data.push(temp);
                    }
                    i++;
                })
                var tmp = ["全局引抽总量", "", "", "", "", "塬上含沙量%", "", "", "塬下含沙量%", "", "", "", ""];
                data.push(tmp);
            }
            else {
                var datas = all_datas.split('|');
                var arr1 = datas[0].split(',');
                var arr2 = datas[1].split(',');
                var arr3 = datas[2].split(',');
                var arr4 = datas[3].split(',');
                var arr5 = datas[4].split(',');
                var arr6 = datas[5].split(',');
                var datas7 = datas[6];
                var datas8 = datas[7];

                var arr41 = [], arr42 = [], arr43 = [], arr44 = [], arr45 = [];
                arr4.forEach(function (value) {
                    if (arr41.length < arr1.length) {     //arr1.length 即为灌区塬上部分数据行数
                        arr41.push(value);
                    }
                    else if (arr42.length < arr1.length) {
                        arr42.push(value);
                    }
                    else if (arr43.length < arr1.length) {
                        arr43.push(value);
                    }
                    else if (arr44.length < arr1.length) {
                        arr44.push(value);
                    }
                    else if (arr45.length < arr1.length) {
                        arr45.push(value);
                    }
                })

                var i = 0;
                arr1.forEach(function (value) {
                    var it5 = arr45[i] ? arr45[i].split(':')[0] : "";
                    var val5 = arr45[i] ? arr45[i].split(':')[1] : "";
                    var temp = ["塬上", value.split(':')[0], value.split(':')[1], arr41[i].split(':')[0], arr41[i].split(':')[1], arr42[i].split(':')[0], arr42[i].split(':')[1]
                        , arr43[i].split(':')[0], arr43[i].split(':')[1], arr44[i].split(':')[0], arr44[i].split(':')[1], it5, val5];
                    data.push(temp);
                    i++;
                })
                i = 0;
                arr2.forEach(function (value) {
                    if (i == 0) {
                        var temp = ["塬下", value.split(':')[0], value.split(':')[1], "干 渠 退 水", "", "水     库    水    情", "", "", "", "", "", "备       注", ""];
                        data.push(temp);
                    }
                    else if (i == 1) {
                        var temp = ["塬下", value.split(':')[0], value.split(':')[1], "闸    名", "流  量", "库   名", "水  位", "蓄水量", "兴利调度", "防汛泄洪", "正常水位", datas7, ""];
                        data.push(temp);
                    }
                    else {
                        var it5 = arr5[i - 2] ? arr5[i - 2].split(':')[0] : "";
                        var val5 = arr5[i - 2] ? arr5[i - 2].split(':')[1] : "";
                        var temp = ["塬下", value.split(':')[0], value.split(':')[1], it5, val5, arr3[i - 2].split(':')[0]
                            , arr3[i - 2].split(':')[1], arr3[i - 2].split(':')[2], arr3[i - 2].split(':')[3], arr3[i - 2].split(':')[4], arr3[i - 2].split(':')[5], "", ""];
                        data.push(temp);
                    }
                    i++;
                })
                var flag_it = "", flag_val = "";

                if (arr5.length > arr2.length - 2) {

                    flag_it = arr5[arr5.length - 1].split(':')[0];
                    flag_val = arr5[arr5.length - 1].split(':')[1];
                }
                var tmp = [datas8.split(':')[0], "", datas8.split(':')[1], flag_it, flag_val, arr6[0].split(':')[0], "", arr6[0].split(':')[1], arr6[1].split(':')[0], "", arr6[1].split(':')[1], "", ""];
                data.push(tmp);
            }

            var settings = {
                data: data,
                copyable: true,
                className: 'htCenter htMiddle',
                manualColumnResize: true,//当值为true时，允许拖动，当为false时禁止拖动
                manualRowResize: true,//当值为true时，允许拖动，当为false时禁止拖动
                //stretchH: "all",     //last:延伸最后一列,all:延伸所有列,none默认不延伸。
                manualColumnMove: true,// 当值为true时，列可拖拽移动到指定列
                manualRowMove: true,// 当值为true时，行可拖拽至指定行
                rowHeaders: false, //当值为true时显示行头，当值为数组时，行头为数组的值
                colHeaders: false,
                sortIndicator: true,
                maxRows: 20,
                contextMenu: true,//显示右键菜单
                autoColumnSize: true, //当值为true且列宽未设置时，自适应列大小
                mergeCells: [{ row: 0, col: 0, rowspan: 1, colspan: 3 }, { row: 0, col: 3, rowspan: 1, colspan: 10 }, { row: 2, col: 0, rowspan: 9, colspan: 1 }
                    , { row: 11, col: 0, rowspan: 8, colspan: 1 }, { row: 11, col: 3, rowspan: 1, colspan: 2 }, { row: 11, col: 5, rowspan: 1, colspan: 6 }, { row: 11, col: 11, rowspan: 1, colspan: 2 }, { row: 12, col: 11, rowspan: 8, colspan: 2 }
                    , { row: 19, col: 0, rowspan: 1, colspan: 2 }, { row: 19, col: 5, rowspan: 1, colspan: 2 }, { row: 19, col: 8, rowspan: 1, colspan: 2 }],
                cells: function (row, column) {
                    var cellMeta = {};
                    if (row < 2 || column < 2 || (column % 2 == 1 && row <= 11) || (row == 12 && column > 2 && column < 11) || column == 5 || (column == 8 && row == 19)
                        || (column == 4 && row == 6) || (column == 6 && row == 3) || (column == 6 && row == 8) || (column == 8 && row == 5) || (column == 10 && row == 5) || (column == 12 && row == 2) || (column == 12 && row == 3)) {
                        cellMeta.readOnly = true;
                    }
                    return cellMeta;
                },
                cell: [{ row: 12, col: 11, className: 'htLeft' }],
                wordWrap: true,
                colWidths: [60, 100, 85, 100, 85, 100, 85, 100, 85, 100, 85, 100, 85]
            }
            hot = new Handsontable(hotElement, settings);

            if ('@Request.IsAuthenticated' == "False")
            {
                $(".wtHider").css({ margin: "0 auto"})
             }
                
        }
    //----handsontable 初始化 完成------
    </script>
</body>